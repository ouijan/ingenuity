package cli

import (
	"fmt"
	"os"
	"path"

	"github.com/dave/jennifer/jen"
	"github.com/iancoleman/strcase"
)

func generateTiledCode(project *TiledProject, outputPath string) error {
	packageName := path.Base(outputPath)
	file := jen.NewFile(packageName)
	file.PackageComment("Code generated by Aether Tiled Codegen. DO NOT EDIT.")

	// for _, command := range project.Commands {
	// 	fmt.Printf("Command: %s\n", command.Name)
	// }

	for _, propertyType := range project.PropertyTypes {
		switch propertyType.Type {
		case "enum":
			generateEnumCode(file, propertyType)
		case "class":
			generateClassCode(file, propertyType)
		}
	}

	os.MkdirAll(outputPath, os.ModePerm)
	fmt.Printf("%#v\n", file)
	err := file.Save(path.Join(outputPath, "tiled_types.go"))
	if err != nil {
		return err
	}
	return nil
}

func generateEnumCode(file *jen.File, enum TiledCustomProperty) {
	isStringStorage := enum.StorageType == "string"
	enumName := strcase.ToCamel(enum.Name)

	if enum.ValuesAsFlags {
		fields := []jen.Code{}
		for _, value := range enum.Values {
			statement := jen.Id(strcase.ToCamel(value)).Bool().Tag(map[string]string{"json": value})
			fields = append(fields, statement)
		}
		file.Type().Id(enumName).Struct(fields...)
		return
	}

	enumDef := jen.Type().Id(enumName)
	if isStringStorage {
		enumDef.String()
	} else {
		enumDef.Int()
	}
	file.Add(enumDef)

	defs := []jen.Code{}
	for i, value := range enum.Values {
		statement := jen.Id(strcase.ToCamel(value))
		if isStringStorage {
			statement.Op("=").Lit(value)
		} else if i == 0 {
			statement.Id(enumName).Op("=").Iota()
		}
		defs = append(defs, statement)
	}
	file.Const().Defs(defs...)
}

func generateClassCode(file *jen.File, class TiledCustomProperty) {
	fields := []jen.Code{}
	for _, member := range class.Members {
		propertyType := member.PropertyType
		if propertyType == "" {
			propertyType = convertToGoType(member.Type)
		}
		statement := jen.Id(strcase.ToCamel(member.Name)).
			Id(propertyType).
			Tag(map[string]string{"json": member.Name})
		if member.Value != nil {
			statement.Comment(fmt.Sprintf("Default: \"%v\"", member.Value))
		}
		fields = append(fields, statement)
	}

	file.Type().Id(strcase.ToCamel(class.Name)).Struct(fields...).Line()
}

func convertToGoType(tiledType string) string {
	switch tiledType {
	case "bool":
		return "bool"
	case "color":
		return "string"
	case "file":
		return "string"
	case "float":
		return "float64"
	case "int":
		return "int"
	case "object":
		return "interface{}"
	case "string":
		return "string"
	}
	return "interface{}"
}
